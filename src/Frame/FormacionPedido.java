/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Frame;

import conexiones.db.ConexionDBOriginal;
import controllers.altadeclientes.controladorCFP;
import internos.tickets.print.Funciones;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import renderTable.TModel;

public class FormacionPedido extends javax.swing.JFrame {

static int idPed =0;
static String name = "";
controladorCFP controlInserts = new controladorCFP();
Funciones fn = new Funciones();
ConexionDBOriginal con2 = new ConexionDBOriginal();
   //Creaci√≥n de un formato con separadores de decimales y millares, con 2 decimales
DecimalFormat formato = new DecimalFormat("#,###.00");

List<String> filUtilidades = new ArrayList<String>();//para productos prestamo

String[] cabEdoPed = {"idRel", "Flete", "idCompra", "Proveedor","Producto","Cantidad","Costo","Total"},
        cabFlet = {"Folio", "En carga", "Carga Tot","Chofer", "Camioneta","$ Costo","Mercancia","$ Prom.","$ Total"};

    BigDecimal[] promedios = {BigDecimal.ZERO,
                                                    BigDecimal.ZERO,
                                                    BigDecimal.ZERO,
                                                    BigDecimal.ZERO,
                                                    BigDecimal.ZERO,
                                                    BigDecimal.ZERO,
                                                    BigDecimal.ZERO};

    public FormacionPedido(int id, String nam) {
        initComponents();
        this.idPed = id;
        this.name = nam;
        txtidPed.setText(Integer.toString(idPed));
        txtClieny.setText(name);
        cargaDetail(Integer.toString(idPed));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTabDetailFletDet = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        txtTotMoneyMerca = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTabDetailPedDet = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtCostFletes = new javax.swing.JTextField();
        txtGranTot = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtTotCajas = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabTotMasUtil = new javax.swing.JLabel();
        jLabUtilon = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        txtClieny = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtidPed = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();

        jTable2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable2.setRowHeight(23);
        jScrollPane5.setViewportView(jTable2);

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 547, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(135, Short.MAX_VALUE))
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addGap(116, 116, 116)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(241, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Detalle Pedido");

        jPanel1.setBackground(new java.awt.Color(204, 255, 204));

        jTabDetailFletDet.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTabDetailFletDet.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTabDetailFletDet.setRowHeight(25);
        jScrollPane1.setViewportView(jTabDetailFletDet);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("FLETES:");

        txtTotMoneyMerca.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/price_refresh.png"))); // NOI18N
        jButton2.setToolTipText("GUARDAR COSTO DE PEDIDO");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTabDetailPedDet.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTabDetailPedDet.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jTabDetailPedDet.setColumnSelectionAllowed(true);
        jTabDetailPedDet.setRowHeight(25);
        jScrollPane2.setViewportView(jTabDetailPedDet);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Total cajas:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Importe fletes $ : ");

        txtCostFletes.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        txtGranTot.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        txtGranTot.setToolTipText("Costo mercancia + fletes");
        txtGranTot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtGranTotActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Importe mercancia: $ : ");

        txtTotCajas.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Agregar nota:");

        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setWrapStyleWord(true);
        jScrollPane3.setViewportView(jTextArea1);

        jTable1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Pedido", "Asign.", "Faltan", "Import.", "Promed.", "Costo final$", "Utilidad tot.$", "Import+Flete", "Promed+Flet"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setRowHeight(25);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTable1KeyReleased(evt);
            }
        });
        jScrollPane4.setViewportView(jTable1);

        jLabel9.setText("PRIM");
        jLabel9.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel10.setText("SEG");
        jLabel10.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel11.setText("PRIM_R");
        jLabel11.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel12.setText("SEG_R");
        jLabel12.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel13.setText("BOLA_P");
        jLabel13.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel14.setText("3_RA");
        jLabel14.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel15.setText("BOLA_S");
        jLabel15.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/delete32px.png"))); // NOI18N
        jButton1.setToolTipText("<html>\n\t<h2>Seleccione una fila de la tabla  <br>\ny oprima este boton para eliminar.</h2> \n</html>");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("TOTAL DE PEDIDO  $");
        jLabel16.setToolTipText("Importe de la mercancia + fletes");

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel17.setToolTipText("Promedio total pedido / total de cajas");
        jLabel17.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel18.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel18.setText("Costo pedido + utilidad");

        jLabel19.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel19.setText("Costo promedio de caja $");

        jLabel20.setFont(new java.awt.Font("Tahoma", 2, 16)); // NOI18N
        jLabel20.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel21.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel21.setText("Costo promedio caja + utilidad $");

        jLabTotMasUtil.setFont(new java.awt.Font("Tahoma", 3, 16)); // NOI18N
        jLabTotMasUtil.setToolTipText("Costo final calculado + utilidad");
        jLabTotMasUtil.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabUtilon.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabUtilon.setText("0.00");
        jLabUtilon.setToolTipText("Suma de utilidad total.");
        jLabUtilon.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel24.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel24.setText("Utilidad $:");

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"PRIM", null},
                {"SEG", null},
                {"PRIM_R", null},
                {"SEG_R", null},
                {"BOLA_P", null},
                {"BOLA_S", null},
                {"TERCERA", null}
            },
            new String [] {
                "Producto", "Importe"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable4.setRowHeight(23);
        jScrollPane8.setViewportView(jTable4);
        if (jTable4.getColumnModel().getColumnCount() > 0) {
            jTable4.getColumnModel().getColumn(0).setResizable(false);
            jTable4.getColumnModel().getColumn(0).setPreferredWidth(55);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(txtTotCajas, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(txtTotMoneyMerca, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(220, 220, 220)
                                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 0, 0)
                                                .addComponent(txtCostFletes, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 203, Short.MAX_VALUE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jScrollPane1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(48, 48, 48)
                                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(70, 70, 70)
                                        .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton2))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(28, 28, 28)
                                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(10, 10, 10)
                                        .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(562, 562, 562)
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtGranTot, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel24)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabUtilon, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 496, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(2, 2, 2)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 537, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabTotMasUtil, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(26, 26, 26)))))
                        .addGap(5, 5, 5))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(9, 9, 9)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtTotCajas, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtTotMoneyMerca, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(57, 57, 57)
                                .addComponent(jLabel9)
                                .addGap(6, 6, 6)
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(5, 5, 5)
                                .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel13)
                                .addGap(6, 6, 6)
                                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(5, 5, 5)
                                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel24))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(3, 3, 3)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                .addComponent(txtGranTot, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(jLabUtilon, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jLabel16))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel18)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabTotMasUtil, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 36, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(93, 93, 93))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCostFletes, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10))))
        );

        txtClieny.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("ID PEDIDO:");

        txtidPed.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("CLIENTE:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(txtidPed, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(txtClieny, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtidPed, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtClieny, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(1, 1, 1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String[] arr = new String[4],util = null;
        filUtilidades.clear();
        Object var = null, utilon = null;
            String idP = txtidPed.getText();
            util =  getDatsPedido(idP); //obtenemos utilidad,notaPed
             arr[0] = jLabUtilon.getText();// 
             arr[1] = jTextArea1.getText();
             arr[2] = "1";
             arr[3] = txtTotCajas.getText();
             //System.err.println("Utilidad: "+util[0]+" tulidad2 = "+util[1]);
             if(util[0].equals("0.00")){//no ha registrado utilidad para este pedido
                actualizaCostoPedido(idP,arr);//actualiza tabla de pedidocliente con costo total
                    for (int i = 0; i < jTable1.getRowCount(); i++) {
                        for (int j = 0; j < jTable1.getColumnCount(); j++) {
                            if(j == 1){
                                var = jTable1.getValueAt(i,j);
                                if( var != null && !var.toString().isEmpty()){
                                    filUtilidades.add(idP);
                                    filUtilidades.add(Integer.toString(i+1));
                                    filUtilidades.add(jTable1.getValueAt(i, j+4).toString());
                                    utilon = jTable1.getValueAt(i, j+5).toString();
                                    if( utilon != null && !utilon.toString().isEmpty()){
                                        filUtilidades.add(utilon.toString() );
                                    }else{
                                        filUtilidades.add("0");  
                                    }
                                    controlInserts.guardaUtilidades(filUtilidades, 0);
                                    filUtilidades.clear();
                                }//if var != null 
                            }//if j == 1
                        }//for j
                    }//for i       
             }else{
                 JOptionPane.showMessageDialog(null, "Va a actualizar utilidades");
                actualizaCostoPedido(idP,arr);//actualiza tabla de pedidocliente con costo total
                for (int i = 0; i < jTable1.getRowCount(); i++) {
                    for (int j = 0; j < jTable1.getColumnCount(); j++) {
                        if(j == 1){
                            var = jTable1.getValueAt(i,j);
                            if( var != null && !var.toString().isEmpty()){
                                filUtilidades.add(idP);
                                filUtilidades.add(Integer.toString(i+1));
                                filUtilidades.add(jTable1.getValueAt(i, j+4).toString());
                                filUtilidades.add(jTable1.getValueAt(i, j+5).toString());
                                controlInserts.guardaUtilidades(filUtilidades, 1);
                                filUtilidades.clear();
                            }//if var != null 
                        }//if j == 1
                    }//for j
                }//for i                  
             }
        this.dispose();
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int sele = jTabDetailPedDet.getSelectedRow();
        if(sele > -1){
             String id = jTabDetailPedDet.getValueAt(sele, 0).toString();
             controlInserts.elimaRow("relcomprapedido","id_relacionCP",id);
             cargaDetail(Integer.toString(idPed));
        }else{
            JOptionPane.showMessageDialog(null, "No hay datos a eliminar");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        int elig = jTable1.getSelectedRow();
        Object var = jTable1.getValueAt(elig, 1);
//        System.err.println("Valor sin check on = "+var);
        if (var != null && !var.toString().isEmpty()) {// || !var.toString().isEmpty()
            jTable1.editCellAt(elig, 5);
            jTable1.setSurrendersFocusOnKeystroke(true);
            jTable1.getEditorComponent().requestFocus();
        } else {
            jTable1.setValueAt(null, elig, 5);
            jTable1.revalidate();
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void jTable1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyReleased
          int oprime = evt.getKeyCode(),
                elig = jTable1.getSelectedRow();
        Object var1 = null,disponib =null;
   String gTot = txtGranTot.getText(), imporMerc = txtTotMoneyMerca.getText(),
           importFlet = txtCostFletes.getText();

        if (oprime == 27) {
            this.dispose();
        }
        if (oprime == evt.VK_ENTER)//KeyEvent.VK_ENTER
        {
            var1 = jTable1.getValueAt(elig, 1).toString();

            if (var1 != null && !var1.toString().isEmpty()) {
                disponib = jTable1.getValueAt(elig, 5);//obtiene valor de utilidad
                if(disponib != null && !disponib.toString().isEmpty()){
                    BigDecimal pr = new BigDecimal(disponib.toString());
                    BigDecimal ut = new BigDecimal(var1.toString());
                    jTable1.setValueAt(fn.multiplicaAmount(pr, ut).toString(), elig, 6);
                    
                    
                }else{
                    jTable1.setValueAt("0", elig, 5);
                    jTable1.setValueAt("0", elig, 6);
                }
                    jLabUtilon.setText(calcPrecNull(jTable1,6));
//jLabTotMasUtil.setText(fn.getDifference(new BigDecimal(imporMerc), fn.getSum(new BigDecimal(importFlet), new BigDecimal(jLabel23.getText()))).toString() );
                jLabTotMasUtil.setText(fn.getDifference(new BigDecimal(jLabUtilon.getText()), new BigDecimal(gTot)).toString() );
                    jLabel20.setText(fn.divideAmount(new BigDecimal(jLabTotMasUtil.getText()), new  BigDecimal(txtTotCajas.getText())).toString());
            }else{
                JOptionPane.showMessageDialog(null, "No existe producto de este tipo asignado a pedido \n Verifique porfavor.");
            }
        }
    }//GEN-LAST:event_jTable1KeyReleased

    private void txtGranTotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtGranTotActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtGranTotActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormacionPedido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormacionPedido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormacionPedido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormacionPedido.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormacionPedido(idPed,name).setVisible(true);
            }
        });
    }

    private void cargaDetail(String idD){    
         for (int i = 0; i <jTable1.getRowCount() ; i++) {
            for (int j = 0; j < jTable1.getColumnCount(); j++) {
                jTable1.setValueAt("", i, j);
            }
        }
        
        String[][] mat = controlInserts.matPedidosEst(idD,0);
        String[] arr = calcAsignAPed(idD),util = getDatsPedido(idD);//regresa suma de cjas y monto total
        
        txtTotCajas.setText(arr[0]);
        txtTotMoneyMerca.setText(arr[1]);
       jTabDetailPedDet.setModel(new TModel(mat, cabEdoPed));
/** ------
Para cargar la descripcion de los fletes enviados a este pedido
------- */
        String[][] matFlet = matFletes(idD);
        jTabDetailFletDet.setModel(new TModel(matFlet,cabFlet));      
        System.err.println("precvio flertes: "+calcPrecFlet(jTabDetailFletDet,8));
     
        txtCostFletes.setText(fn.getSum(new BigDecimal(calcPrecFlet(jTabDetailFletDet,8)), BigDecimal.ZERO).toString());//suma costos de fletes
        
        BigDecimal amountOne = new BigDecimal(txtCostFletes.getText());//monto a cobrar
        BigDecimal amountTwo = new BigDecimal(txtTotMoneyMerca.getText());//cantidad recivida
        txtGranTot.setText(fn.getSum(amountOne, amountTwo).toString());
                
        BigDecimal coastT = new BigDecimal(txtGranTot.getText());//monto a cobrar
        BigDecimal numCaj = new BigDecimal(txtTotCajas.getText());//cantidad recivida  
            
        jLabel17.setText(fn.divideAmount(coastT, numCaj).toString());
            
       //     jTextField1.setText(util[0]);
            jTextArea1.setText(util[1]);
            cargaTotCompDayProveedor(idD);
            totalon();
            jLabUtilon.setText(calcPrecNull(jTable1, 6));
            
            jLabTotMasUtil.setText(fn.getDifference(new BigDecimal(jLabUtilon.getText()), new BigDecimal(txtGranTot.getText())).toString());
jLabel20.setText(fn.divideAmount(new BigDecimal(jLabTotMasUtil.getText()), new BigDecimal(txtTotCajas.getText())).toString());
            redimensionaColumns();
            
 //OBTENER COSTO SEGUN PRODUCTOS
       llenaCoastFlet();
       
//suma precio de flete
totalonPrecFlete();
totalonPomed();
    } 
    
    public String[] calcAsignAPed(String idPed){
        Connection cn = con2.conexion();
        String[] prod = new String[2];
        String sql = "SELECT SUM(cantidadCajasRel),SUM(cantidadCajasRel*precioAjust)\n" +
                            "FROM relcomprapedido WHERE id_pedidoCli  = '"+idPed+"' AND relcomprapedido.typeVP_PC = 0;";
        Statement st = null;
        ResultSet rs= null;
        try {
            st = cn.createStatement();
            rs = st.executeQuery(sql);
            if(rs.next())
            {
                    if(rs.getRow() > 0){
                        prod[0] = rs.getString(1);
                        prod[1] = rs.getString(2);
                    }else{
                            prod[0] = "0.00";
                            prod[1] = "0.00"; 
                    }
            }
        } catch (SQLException ex) {
            Logger.getLogger(FormacionPedido.class.getName()).log(Level.SEVERE, null, ex);
        }finally{
                    try {
                        if(cn != null) cn.close();
                    } catch (SQLException ex) {
                       JOptionPane.showMessageDialog(null,ex.getMessage() );    
                    }
                }
        return prod;
    }
    
     public String[][] matFletes(String fech){
        Connection cn = con2.conexion();
          String sql ="",aux;
              sql = "SELECT\n" +
                " relCompraPedido.id_fleteP,SUM(relCompraPedido.cantidadCajasRel) AS mercan,fleteenviado.cargaParcial,fleteenviado.choferFlete,\n" +
                " fleteenviado.trocaFlete,fleteenviado.costoFlete,\n" +
                " productocal.nombreP,\n" +                      
                " CAST( ( fleteenviado.costoFlete / fleteenviado.cargaParcial ) AS DECIMAL(8,2) ), \n"+      
                " CAST( ( (fleteenviado.costoFlete / fleteenviado.cargaParcial) * SUM(relCompraPedido.cantidadCajasRel) ) AS DECIMAL(8,2) ) \n"+
                "FROM\n" +
                "	relcomprapedido\n" +
                "INNER JOIN\n" +
                "	fleteenviado\n" +
                "ON\n" +
                " relcomprapedido.id_fleteP = fleteenviado.id_fleteE AND relCompraPedido.id_pedidoCli='"+fech+"'\n" +
             "INNER JOIN\n" +
                "	productoCal\n" +
                "ON\n" +
                " productoCal.codigo = relcomprapedido.tipoMercanRel\n" +          
                "GROUP BY\n" +
                "relcomprapedido.tipoMercanRel,relcomprapedido.id_fleteP;";      
             int i =0,cantFilas=0, cont=1,cantColumnas=0;
             String[][] mat=null;
             int[] arrIdPedido = null;//int para usar hashMap
             Statement st = null;
             ResultSet rs = null;            
             try {
                st = cn.createStatement();
                rs = st.executeQuery(sql);
                cantColumnas = rs.getMetaData().getColumnCount();
               if(rs.last()){//Nos posicionamos al final
                    cantFilas = rs.getRow();//sacamos la cantidad de filas/registros
                    rs.beforeFirst();//nos posicionamos antes del inicio (como viene por defecto)
                }
               mat = new String[cantFilas][cantColumnas];
               //aqui iria crear matriz
                while(rs.next())
                {//es necesario el for para llenar dinamicamente la lista, ya que varia el numero de columnas de las tablas
                      for (int x=1;x<= rs.getMetaData().getColumnCount();x++) {
                             mat[i][x-1]=rs.getString(x);
                      }//for
                       i++;
                }//whilE
            } catch (SQLException ex) {
                Logger.getLogger(controladorCFP.class.getName()).log(Level.SEVERE, null, ex);
            }finally{               
             try {        
                 if(st != null) st.close();                
                 if(cn !=null) cn.close();
             } catch (SQLException ex) {
                 JOptionPane.showMessageDialog(null,ex.getMessage()); 
             }
         }//finally        
           if (cantFilas == 0){
                mat=null;
                mat = new String[1][cantColumnas];
                
                for (int j = 0; j < mat[0].length; j++) {
                     mat[0][j]="NO DATA";
                }
           }
return mat;            
}
     
      public String calcPrecFlet(JTable tablon,int colsum){
            String sumon ="",dat;
            double t = 0, p = 0;
            for (int i = 0; i < tablon.getRowCount(); i++) {
                p = Double.parseDouble(tablon.getValueAt(i,colsum).toString());
                t += p;
            }
            sumon = Double.toString(t);
        return sumon;
    }
      
      public String calcPrecNull(JTable tablon,int colsum){
            String sumon ="",dat;
            double t = 0, p = 0;
            Object var = null;
            for (int i = 0; i < tablon.getRowCount(); i++) {
                var = tablon.getValueAt(i,colsum);
                if( var != null && !var.toString().isEmpty()){
                    p = Double.parseDouble(tablon.getValueAt(i,colsum).toString());
                }else{
                    p = 0;
                }     
                    t += p;
            }
            sumon = Double.toString(t);
        return sumon;
    }
      
    public void actualizaCostoPedido(String idPed,String[] arre){
             Connection cn = con2.conexion();
            PreparedStatement pps=null;
            String SQL="";        
                SQL="UPDATE pedidocliente SET totalPrecio =?, notaPed =?,utilidad=?,cajAsign=? WHERE id_pedido = '"+idPed+"' ";                           
            try {
                pps = cn.prepareStatement(SQL);
                pps.setString(1, arre[0]);
                pps.setString(2, arre[1]);
                pps.setInt(3, Integer.parseInt(arre[2]));
                pps.setString(4, arre[3]);
                pps.executeUpdate();
                JOptionPane.showMessageDialog(null, "Pedido actualizado correctamente.");
            } catch (SQLException ex) {
                Logger.getLogger(controladorCFP.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Error durante la transaccio "+ex);
            }finally{
 //               System.out.println( "cierra conexion a la base de datos" );    
                try {
                    if(pps != null) pps.close();                
                    if(cn !=null) cn.close();
                    } catch (SQLException ex) {
                     JOptionPane.showMessageDialog(null,ex.getMessage() );    
                    }
            }//finally catch
        }
           
    //regresa duma de pedidos asignados a mayoristas
        public String[] getDatsPedido(String idP){
            Connection cn = con2.conexion();
            String[] suma = new String[2];
            int num=0,i=1;
            String sql = "";
            sql = "SELECT utilidad,notaPed FROM pedidocliente WHERE id_pedido = '"+idP+"';";//id_ProveedorMay
            Statement st = null;
            ResultSet rs= null;
            try {
                st = cn.createStatement();
                rs = st.executeQuery(sql);
                rs.beforeFirst();
                while(rs.next())
                {
                    suma[0] = rs.getString(1);
                    suma[1] = rs.getString(2);
                }
            } catch (SQLException ex) {
                Logger.getLogger(FormacionPedido.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Error getDatsPedido"+ex);
            }finally{
                        try {
                            if(cn != null) cn.close();
                        } catch (SQLException ex) {
                            System.err.println( ex.getMessage() );    
                        }
                    }
           return suma;
    }//validaProveedorMayorista
        
// CARGA LA SUMA DE CAJAS, IMPORTE TOTAL DE COMPRAS Y SUMA DE TIPO DE MERCANCIA EN EL DIA
    protected void cargaTotCompDayProveedor(String idPedidon) {
        Connection cn = con2.conexion();
        int cantColumnas = 0, cantFilas = 0, temporal = 0, bandera = 0;
        String sql = "", sql2 = "",sql3 ="",sql4="",sql5="";
//Muestra la cantidad de cajas que se registraron en el pedido
        sql = "SELECT productocal.codigo,SUM(detailpedidio.cantidadCajas) AS sumaType\n" +
                "FROM detailpedidio\n" +
                "INNER JOIN pedidocliente\n" +
                "ON detailpedidio.id_PedidioD = pedidocliente.id_pedido\n" +
                "AND pedidocliente.id_pedido = '"+idPedidon+"'\n" +
                "INNER JOIN productocal\n" +
                "ON productocal.codigo = detailpedidio.codigoProdP\n" +
                "GROUP BY productocal.codigo;";
//Obtenemos la sumatoria de lo que fue asignado y destinado a los pedidos        
        sql3 = " SELECT productocal.codigo,SUM(relcomprapedido.cantidadCajasRel) AS sumaType,\n" +
                   " SUM(relcomprapedido.cantidadCajasRel * relcomprapedido.precioAjust) ,\n" +
                   " CAST( (SUM( relcomprapedido.cantidadCajasRel * relcomprapedido.precioAjust)  / SUM( relcomprapedido.cantidadCajasRel)) AS DECIMAL(8,2) ) "+
                   " FROM relcomprapedido\n" +
                   " INNER JOIN productocal\n" +
                   " ON productocal.codigo = relcomprapedido.tipoMercanRel AND relcomprapedido.id_pedidoCli = '"+idPedidon+"' AND typeVP_PC = 0\n" +
                   " GROUP BY productocal.codigo;";
        sql2 = "SELECT productocal.codigo,utilidadped.utilidad,utilidadped.importon\n" +
                    "FROM utilidadped\n" +
                    "INNER JOIN productocal\n" +
                    "ON productocal.codigo = utilidadped.tipoMercan AND utilidadped.idPedidon = '"+idPedidon+"'\n" +
                    ";";
        Statement st = null;
        ResultSet rs = null;
        try {
            st = cn.createStatement();
            rs = st.executeQuery(sql);
            while (rs.next()) {//es necesario el for para llenar dinamicamente la lista, ya que varia el numero de columnas de las tablas
                for (int x = 1; x <= rs.getMetaData().getColumnCount(); x++) {
                    if (x == 1) {
                        jTable1.setValueAt(rs.getInt(x + 1),rs.getInt(x) - 1, 0);//se le suma 1 por las columnas id,nombre de la jTable
                    }
                }//for
            }//while #1
            st = null;
            rs = null;
            st = cn.createStatement();
            rs = st.executeQuery(sql3);
            rs.beforeFirst();
           while (rs.next()) {//es necesario el for para llenar dinamicamente la lista, ya que varia el numero de columnas de las tablas
                for (int x = 1; x <= rs.getMetaData().getColumnCount(); x++) {
                    if (x == 1) {
                        jTable1.setValueAt(rs.getInt(x + 1), rs.getInt(x) - 1,1);//se le suma 1 por las columnas id,nombre de la jTable
                        jTable1.setValueAt(rs.getInt(x + 2),rs.getInt(x) - 1, 3);//se le suma 1 por las columnas id,nombre de la jTable
                        jTable1.setValueAt(rs.getString(x + 3),rs.getInt(x) - 1, 4);//se le suma 1 por las columnas id,nombre de la jTable
                        jTable1.setValueAt("0",rs.getInt(x) - 1, 5);//se le suma 1 por las columnas id,nombre de la jTable
                    }
                }//for
            }//while #2
            st = null;
            rs = null;
            st = cn.createStatement();
            rs = st.executeQuery(sql2);
            rs.beforeFirst();
           while (rs.next()) {//es necesario el for para llenar dinamicamente la lista, ya que varia el numero de columnas de las tablas
                for (int x = 1; x <= rs.getMetaData().getColumnCount(); x++) {
                    if (x == 1) {
                        jTable1.setValueAt(rs.getBigDecimal(x + 1), rs.getInt(x) - 1,5);//se le suma 1 por las columnas id,nombre de la jTable
                        jTable1.setValueAt(rs.getBigDecimal(x + 2), rs.getInt(x) - 1,6);//se le suma 1 por las columnas id,nombre de la jTable
                    }
                }//for
            }//while #3
        } catch (SQLException ex) {
            Logger.getLogger(FormacionPedido.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                if (st != null) {
                    st.close();
                }
                if (cn != null) {
                    cn.close();
                }
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }
        }//finally  
    }
    
    public void totalon(){
        Object val1,val2,result;
        int vak1,vak2,resuk;
            for (int j = 0; j < jTable1.getRowCount(); j++) {
                val1 = jTable1.getValueAt(j,0);
                val2 = jTable1.getValueAt(j,1);
                if (val1 == null || val1.toString().isEmpty())
                    vak1 = 0;
                else{
                    vak1 = Integer.parseInt(val1.toString());
                }
                if (val2 == null || val2.toString().isEmpty())
                    vak2 = 0;
                else{
                    vak2 = Integer.parseInt(val2.toString());
                }
                resuk=vak1-vak2;
               jTable1.setValueAt(resuk,j,2);
            }
    }
    
//Calcular suma total y promedio
        public void totalonPrecFlete(){
        Object val1,val2,val3,result;       
        String vak1,vak2,vak3,resuk;
            for (int j = 0; j < jTable1.getRowCount(); j++) {
                val1 = jTable1.getValueAt(j,3);
                val2 = jTable4.getValueAt(j,1);
                if (val1 == null || val1.toString().isEmpty()){
                    vak1 = "0";
                }else{
                    vak1 = val1.toString();
                }
                if (val2 == null || val2.toString().isEmpty()){
                    vak2 = "0";
                }else{
                    vak2 = val2.toString();
                }
                resuk= fn.getSum(new BigDecimal(vak1), new BigDecimal(vak2)).toString();
               jTable1.setValueAt(resuk,j,7);
            }
    }
    
        //Calcular suma total y promedio
        public void totalonPomed(){
        Object val1,val2,result;       
        String vak1,vak2, resuk;
            for (int j = 0; j < jTable1.getRowCount(); j++) {
                val1 = jTable1.getValueAt(j,7);
                val2 = jTable1.getValueAt(j,1);
                if (val1 == null || val1.toString().isEmpty()){
                    vak1 = "0";
                }else{
                    vak1 = val1.toString();
                }
                if (val2 == null || val2.toString().isEmpty()){
                    vak2 = "0";
                }else{
                    vak2 = val2.toString();
                }
                if(vak2.equals("0"))
                    jTable1.setValueAt(vak2,j,8);
                else{
                    resuk= fn.divideAmount(new BigDecimal(vak1), new BigDecimal(vak2)).toString();
                   jTable1.setValueAt(resuk,j,8);
                }
            }
    }
        
        protected void redimensionaColumns(){
        //Matriz principal, descripcion de formacion del pedido
        jTabDetailPedDet.getColumnModel().getColumn(0).setMaxWidth(0);
        jTabDetailPedDet.getColumnModel().getColumn(0).setMinWidth(0);
        jTabDetailPedDet.getColumnModel().getColumn(0).setPreferredWidth(0);
        
        jTabDetailPedDet.getColumnModel().getColumn(1).setMaxWidth(150);
        jTabDetailPedDet.getColumnModel().getColumn(1).setMinWidth(80);
        jTabDetailPedDet.getColumnModel().getColumn(1).setPreferredWidth(80);
        
        jTabDetailPedDet.getColumnModel().getColumn(2).setMaxWidth(150);
        jTabDetailPedDet.getColumnModel().getColumn(2).setMinWidth(80);
        jTabDetailPedDet.getColumnModel().getColumn(2).setPreferredWidth(80);

        jTabDetailPedDet.getColumnModel().getColumn(4).setMaxWidth(150);
        jTabDetailPedDet.getColumnModel().getColumn(4).setMinWidth(80);
        jTabDetailPedDet.getColumnModel().getColumn(4).setPreferredWidth(80);

        jTabDetailPedDet.getColumnModel().getColumn(5).setMaxWidth(150);
        jTabDetailPedDet.getColumnModel().getColumn(5).setMinWidth(80);
        jTabDetailPedDet.getColumnModel().getColumn(5).setPreferredWidth(80);

        jTabDetailPedDet.getColumnModel().getColumn(6).setMaxWidth(150);
        jTabDetailPedDet.getColumnModel().getColumn(6).setMinWidth(80);
        jTabDetailPedDet.getColumnModel().getColumn(6).setPreferredWidth(80);
        
        jTabDetailPedDet.getColumnModel().getColumn(7).setMaxWidth(180);
        jTabDetailPedDet.getColumnModel().getColumn(7).setMinWidth(100);
        jTabDetailPedDet.getColumnModel().getColumn(7).setPreferredWidth(100);

        //matriz de detalles de fletes asignados
        jTabDetailFletDet.getColumnModel().getColumn(0).setMaxWidth(150);
        jTabDetailFletDet.getColumnModel().getColumn(0).setMinWidth(80);
        jTabDetailFletDet.getColumnModel().getColumn(0).setPreferredWidth(80);
        
        jTabDetailFletDet.getColumnModel().getColumn(1).setMaxWidth(150);
        jTabDetailFletDet.getColumnModel().getColumn(1).setMinWidth(80);
        jTabDetailFletDet.getColumnModel().getColumn(1).setPreferredWidth(80);
        
        jTabDetailFletDet.getColumnModel().getColumn(2).setMaxWidth(150);
        jTabDetailFletDet.getColumnModel().getColumn(2).setMinWidth(80);
        jTabDetailFletDet.getColumnModel().getColumn(2).setPreferredWidth(80);
        
        jTabDetailFletDet.getColumnModel().getColumn(5).setMaxWidth(150);
        jTabDetailFletDet.getColumnModel().getColumn(5).setMinWidth(80);
        jTabDetailFletDet.getColumnModel().getColumn(5).setPreferredWidth(80);
        
        jTabDetailFletDet.getColumnModel().getColumn(7).setMaxWidth(150);
        jTabDetailFletDet.getColumnModel().getColumn(7).setMinWidth(80);
        jTabDetailFletDet.getColumnModel().getColumn(7).setPreferredWidth(80);
    }
    
    // calcular el costo de fletes segune el tipo de mercancia
        private BigDecimal calcFlet$(String tipoM){
             Object val = null;
             BigDecimal  ret = BigDecimal.ZERO;
             BigDecimal acumulador = BigDecimal.ZERO;
                    for (int i = 0; i <jTabDetailFletDet.getRowCount() ; i++) {
                        for (int j = 0; j < jTabDetailFletDet.getColumnCount(); j++) {
                            if(j == 6){
                                val = jTabDetailFletDet.getValueAt(i,j);
                                if(val.toString().equals(tipoM)){
                                    ret = new BigDecimal(jTabDetailFletDet.getValueAt(i,j+2).toString());
                                    acumulador = fn.getSum(ret, acumulador);
                                }
                            }
                        }
                    }
                return acumulador;
        }
        
//llena arreglo de costo por tipo de mercancia de fletes
        private void llenaCoastFlet(){
    //limpiar tabla de fletes costo
        for (int i = 0; i < jTable4.getRowCount(); i++) {
            jTable4.setValueAt("", i, 1);
        }
     promedios[0] =  calcFlet$("PRIM");
     promedios[1] =  calcFlet$("SEG");
     promedios[2] =  calcFlet$("PRIM_R");
     promedios[3] =  calcFlet$("SEG_R");
     promedios[4] =  calcFlet$("BOLA_P");
     promedios[5] =  calcFlet$("BOLA_S");
     promedios[6] =  calcFlet$("TERCERA");
    //Llena tabla de fletes costo
        for (int i = 0; i < jTable4.getRowCount(); i++) {
            jTable4.setValueAt(promedios[i], i, 1);
        }
}        
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabTotMasUtil;
    private javax.swing.JLabel jLabUtilon;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTabDetailFletDet;
    private javax.swing.JTable jTabDetailPedDet;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField txtClieny;
    private javax.swing.JTextField txtCostFletes;
    private javax.swing.JTextField txtGranTot;
    private javax.swing.JTextField txtTotCajas;
    private javax.swing.JTextField txtTotMoneyMerca;
    private javax.swing.JTextField txtidPed;
    // End of variables declaration//GEN-END:variables
}
